lianyi@lianyi-Ubuntu:~/CSAPP/work01$ sudo apt-get install zlib1g-dev
[sudo] lianyi 的密码： 
正在读取软件包列表... 完成
正在分析软件包的依赖关系树... 完成
正在读取状态信息... 完成                 
下列软件包是自动安装的并且现在不需要了：
  libwpe-1.0-1 libwpebackend-fdo-1.0-1
使用'sudo apt autoremove'来卸载它(它们)。
下列【新】软件包将被安装：
  zlib1g-dev
升级了 0 个软件包，新安装了 1 个软件包，要卸载 0 个软件包，有 25 个软件包未被升级。
需要下载 164 kB 的归档。
解压缩后会消耗 606 kB 的额外空间。
获取:1 http://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-updates/main amd64 zlib1g-dev amd64 1:1.2.11.dfsg-2ubuntu9.2 [164 kB]
已下载 164 kB，耗时 1秒 (137 kB/s) 
正在选中未选择的软件包 zlib1g-dev:amd64。
(正在读取数据库 ... 系统当前共安装有 216334 个文件和目录。)
准备解压 .../zlib1g-dev_1%3a1.2.11.dfsg-2ubuntu9.2_amd64.deb  ...
正在解压 zlib1g-dev:amd64 (1:1.2.11.dfsg-2ubuntu9.2) ...
正在设置 zlib1g-dev:amd64 (1:1.2.11.dfsg-2ubuntu9.2) ...
正在处理用于 man-db (2.10.2-1) 的触发器 ...
lianyi@lianyi-Ubuntu:~/CSAPP/work01$ make
gcc -pg -Og -Wall -Wextra -Winline -Winit-self -Wno-sequence-point -Wno-unused-function -Wno-inline -fPIC -W -Wcast-qual -Wpointer-arith  -o predictor bt9.o main.o predictor.o -lz
rm -f bt9.o main.o predictor.o
lianyi@lianyi-Ubuntu:~/CSAPP/work01$ ./predictor ../traces/LONG_MOBILE-1.bt9.trace.gz
Branch Predictor Framework by mars, 2020
[parse_bt9_file] Begin parse BT9 file, please wait...
[parse_bt9_file] Can't open file ../traces/LONG_MOBILE-1.bt9.trace.gz
[main] Fail decompress file ../traces/LONG_MOBILE-1.bt9.trace.gz
lianyi@lianyi-Ubuntu:~/CSAPP/work01$ ./predictor ./traces/LONG_MOBILE-1.bt9.trace.gz
Branch Predictor Framework by mars, 2020
[parse_bt9_file] Begin parse BT9 file, please wait...
[parse_bt9_file] End of parse BT9 file, total 29274796 lines parsed...
  TRACE                       	 : ./traces/LONG_MOBILE-1.bt9.trace.gz
  NUM_INSTRUCTIONS            	 :  642168792
  NUM_BR                      	 :   29269647
  NUM_UNCOND_BR               	 :      54106
  NUM_CONDITIONAL_BR          	 :   29215542
  NUM_MISPREDICTIONS          	 :     370661
  MISPRED_PER_1K_INST         	 :     0.5772
lianyi@lianyi-Ubuntu:~/CSAPP/work01$ gprof predictor
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 42.82      0.81     0.81 29274796     0.00     0.00  get_line_from_bt9
 27.66      1.32     0.52 29274796     0.00     0.00  process_bt9_line
 12.77      1.56     0.24        1     0.24     0.46  SimBT9
  7.18      1.70     0.14 29215542     0.00     0.00  UpdatePredictor
  3.99      1.77     0.07 29215542     0.00     0.00  GetPrediction
  2.13      1.81     0.04        1     0.04     1.38  parse_bt9_file
  2.13      1.85     0.04                             _init
  0.53      1.86     0.01     5145     0.00     0.00  split_space
  0.53      1.88     0.01        1     0.01     0.01  PREDICTOR_init
  0.27      1.88     0.01     5147     0.00     0.00  Trim
  0.00      1.88     0.00        1     0.00     0.00  FreeBT9
  0.00      1.88     0.00        1     0.00     0.00  PREDICTOR_free

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.


Copyright (C) 2012-2022 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.


		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.53% of 1.88 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     97.9    0.00    1.84                 main [1]
                0.04    1.34       1/1           parse_bt9_file [2]
                0.24    0.22       1/1           SimBT9 [5]
                0.00    0.00       1/1           FreeBT9 [12]
-----------------------------------------------
                0.04    1.34       1/1           main [1]
[2]     73.4    0.04    1.34       1         parse_bt9_file [2]
                0.81    0.00 29274796/29274796     get_line_from_bt9 [3]
                0.52    0.01 29274796/29274796     process_bt9_line [4]
-----------------------------------------------
                0.81    0.00 29274796/29274796     parse_bt9_file [2]
[3]     42.8    0.81    0.00 29274796         get_line_from_bt9 [3]
-----------------------------------------------
                0.52    0.01 29274796/29274796     parse_bt9_file [2]
[4]     28.5    0.52    0.01 29274796         process_bt9_line [4]
                0.01    0.00    5145/5145        split_space [9]
                0.01    0.00    5147/5147        Trim [11]
-----------------------------------------------
                0.24    0.22       1/1           main [1]
[5]     24.5    0.24    0.22       1         SimBT9 [5]
                0.14    0.00 29215542/29215542     UpdatePredictor [6]
                0.07    0.00 29215542/29215542     GetPrediction [7]
                0.01    0.00       1/1           PREDICTOR_init [10]
                0.00    0.00       1/1           PREDICTOR_free [13]
-----------------------------------------------
                0.14    0.00 29215542/29215542     SimBT9 [5]
[6]      7.2    0.14    0.00 29215542         UpdatePredictor [6]
-----------------------------------------------
                0.07    0.00 29215542/29215542     SimBT9 [5]
[7]      4.0    0.07    0.00 29215542         GetPrediction [7]
-----------------------------------------------
                                                 <spontaneous>
[8]      2.1    0.04    0.00                 _init [8]
-----------------------------------------------
                0.01    0.00    5145/5145        process_bt9_line [4]
[9]      0.5    0.01    0.00    5145         split_space [9]
-----------------------------------------------
                0.01    0.00       1/1           SimBT9 [5]
[10]     0.5    0.01    0.00       1         PREDICTOR_init [10]
-----------------------------------------------
                0.01    0.00    5147/5147        process_bt9_line [4]
[11]     0.3    0.01    0.00    5147         Trim [11]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[12]     0.0    0.00    0.00       1         FreeBT9 [12]
-----------------------------------------------
                0.00    0.00       1/1           SimBT9 [5]
[13]     0.0    0.00    0.00       1         PREDICTOR_free [13]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.


Copyright (C) 2012-2022 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.


Index by function name

  [12] FreeBT9                 [5] SimBT9                  [3] get_line_from_bt9
   [7] GetPrediction          [11] Trim                    [2] parse_bt9_file
  [13] PREDICTOR_free          [6] UpdatePredictor         [4] process_bt9_line
  [10] PREDICTOR_init          [8] _init                   [9] split_space

